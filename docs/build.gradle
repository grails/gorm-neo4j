import org.groovy.lang.groovydoc.tasks.GroovydocTask

ext {
    githubBranch = "master"
    checkOutDir = "build/checkout"
    zipFile = "build/source.zip"

    coreProjects = [
            'core',
            'gorm'
    ]

}

version rootProject.version

apply plugin: 'org.asciidoctor.convert'

dependencies {
    documentation "org.codehaus.groovy:groovy-all:$groovyVersion"
    documentation 'org.fusesource.jansi:jansi:1.18'
    for(p in coreProjects) {
        documentation "org.grails:grails-datastore-$p:$datastoreVersion"
    }
    project.rootProject.subprojects.each { subproject ->
        if(subproject.name != "docs" && !subproject.name.startsWith('examples')) {
            documentation project(":$subproject.name")
        }
    }
}

asciidoctor {
    resources {
        from("${project.projectDir}/src/docs/images")
        into "${project.projectDir}/images"
    }

    attributes  'experimental'  : 'true',
                'compat-mode'   : 'true',
                'toc'           : 'left',
                'icons'         : 'font',
                'reproducible'  : '',
                'version'       : project.version,
                'pluginVersion' : project.version - '.RELEASE',
                'neo4jVersion'  : neo4jVersion,
                'sourcedir'     : "${project.rootProject.projectDir}/grails-datastore-gorm-neo4j/src/main/groovy",
                'exampledir'     : "${project.rootProject.projectDir}/examples/grails3-neo4j",
                'testsdir'     : "${project.rootProject.projectDir}/grails-datastore-gorm-neo4j/src/test/groovy"
}

asciidoctorj {
    version = '1.5.4'
}

task fetchSource {
    doLast() {
    ant.mkdir dir: project.buildDir
    ant.mkdir dir: checkOutDir

    println "Downloading GORM source code."
    def tag = System.getenv('TRAVIS_TAG')
    if(tag) {
        ant.get src: "https://github.com/grails/grails-data-mapping/archive/${tag}.zip", dest: zipFile, verbose: true
    }
    else {
        ant.get src: "http://github.com/grails/grails-data-mapping/zipball/${githubBranch}", dest: zipFile, verbose: true
    }

    ant.unzip src: zipFile, dest: checkOutDir, {
        mapper type: "regexp", from: "(grails-\\S*?/)(.*)", to: "gorm-src/\\2"
    }

    println "GORM source code downloaded."
    }
}

fetchSource.inputs.properties(branch:githubBranch)
fetchSource.outputs.dir checkOutDir


task copyDocs(type:Copy, dependsOn:asciidoctor) {
    from "${project.buildDir}/asciidoc/html5"
    into "${project.buildDir}/docs/manual"
}

task groovydoc(type:GroovydocTask, dependsOn:fetchSource) {
    docTitle = "GORM for Neo4j - ${project.version}"
    destinationDir = project.file("build/docs/api")
    notimestamp = true
    noversionstamp = true

    def files
    for(p in coreProjects) {
        if(files == null) {
            files = project.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
        }
        else {
            files += project.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
        }
    }
    project.rootProject.subprojects.each { subproject ->
        if(subproject.name.startsWith('examples')) return
        if(subproject.file('src/main/groovy').exists()) {
            files += subproject.files("src/main/groovy")
        }
    }
    source = files
    classpath = configurations.documentation
    jvmArgs "-Xmx1024m"
}

task copyResources(type:Copy) {
    from 'src/docs/resources'
    into "${project.buildDir}/docs"
}
task docs(dependsOn:[asciidoctor, groovydoc, copyDocs, copyResources] +
        subprojects.findAll { project -> project.tasks.findByName('groovydoc')}
                .collect { project -> project.tasks.groovydoc }
)

//task assemble(type: Zip, dependsOn:docs) {
//    from "${project.buildDir}/docs"
//    baseName = "${project.name}-${project.version}"
//    destinationDir = project.file("${project.buildDir}/distributions")
//}