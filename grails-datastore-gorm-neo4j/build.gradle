sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs += ["src/main/java"]

dependencies {
    compile "org.neo4j.driver:neo4j-java-driver:$neo4jDriverVersion"
    compile "org.grails:grails-datastore-gorm-validation:$datastoreVersion"
    compile "org.grails:grails-datastore-gorm:$datastoreVersion"

    // only needed for web dependencies
    compileOnly "org.grails:grails-datastore-web:$datastoreVersion"
    compileOnly "org.neo4j.test:neo4j-harness:$neo4jVersion"

    testCompile "org.neo4j.test:neo4j-harness:$neo4jVersion"
    testCompile "org.grails:grails-datastore-gorm-test:$datastoreVersion",
                "org.grails:grails-datastore-gorm-tck:$datastoreVersion"
    testCompile("org.hibernate:hibernate-validator:$hibernateValidatorVersion")
    testCompile "org.codehaus.gpars:gpars:$gparsVersion"
    testCompile "cglib:cglib-nodep:$cglibNodepVersion"
    testCompile "org.objenesis:objenesis:${objenesisVersion}"
    
    testRuntime "org.springframework:spring-aop:$springVersion"
    testRuntime "ch.qos.logback:logback-classic:1.1.7"
    testRuntime('javax.el:javax.el-api:2.2.4')
    testRuntime('org.glassfish.web:el-impl:2.2')


}

test {
    if (isTravisBuild) {
        maxParallelForks = 1
        forkEvery = 10
    }
    else {
//        maxParallelForks = 2
//        forkEvery = 10
    }

    jvmArgs = ['-Xmx1028M']
    afterSuite {
        System.out.print('.')
        System.out.flush()
    }
}

test.doFirst {
    def toBaseClassRelativePathWithoutExtension = { String base, String classFile ->
        if (classFile.startsWith(base)) {
            def sansClass = classFile[0 .. classFile.size() - ".class".size() - 1]
            def dollarIndex = sansClass.indexOf('$')
            def baseClass = dollarIndex > 0 ? sansClass[0..dollarIndex - 1] : sansClass
            def relative = baseClass - base - '/'
            relative
        }
        else {
            null
        }
    }    
    def tckClassesFile = project
                            .configurations
                            .testCompile
                            .resolvedConfiguration
                            .getResolvedArtifacts()
                            .find { resolved ->
                                resolved.moduleVersion.id.name == 'grails-datastore-gorm-tck'
                            }.file

    def tckClassesDir = project.file("${project.buildDir}/tck")                            
    copy {
        from zipTree(tckClassesFile)
        into tckClassesDir 
    }
    copy {
        from tckClassesDir
        into sourceSets.test.output.classesDirs.find { it.path.contains('classes/groovy') }
        include "**/*.class"
        exclude { details ->
            // Do not copy across any TCK class (or nested classes of that class)
            // If there is a corresponding source file in the particular modules
            // test source tree. Allows a module to override a test/helper.

            if (!details.file.isFile()) {
                return false
            }
            def candidatePath = details.file.absolutePath
            def relativePath = toBaseClassRelativePathWithoutExtension(tckClassesDir.absolutePath, candidatePath)

            if (relativePath == null) {
                throw new IllegalStateException("$candidatePath does not appear to be in the TCK")
            }

            project.file("src/test/groovy/${relativePath}.groovy").exists()
        }
    }
}
